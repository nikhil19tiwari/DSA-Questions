Q-1->Reverse an Array ->https://www.geeksforgeeks.org/problems/reverse-an-array/1

**** Solution 1****

class Solution {
    public void reverseArray(int arr[]) {
    int i = 0;
    int j = arr.length-1;
    while(i<j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
        j--;
    }
    }
}


**** Solution 2****

class Solution {
    public void reverseArray(int arr[]) {
    int n = arr.length/2;
    int j = arr.length-1;
    for(int i = 0;i<n;i++){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        j--;
    }
    }
}

Q-2->Min and Max in Array -->https://www.geeksforgeeks.org/problems/find-minimum-and-maximum-element-in-an-array4428/1

class Solution {
    public Pair<Integer, Integer> getMinMax(int[] arr) {
    if(arr.length <= 0)return new Pair(-1,-1);
    if(arr.length == 1)return new Pair(arr[0],arr[0]);
    int mini = arr[0];
    int maxi = arr[0];
    for(int i = 1;i<arr.length;i++){
        if(arr[i] < mini){
            mini = arr[i];
        }
        else if(arr[i] > maxi){
            maxi = arr[i];
        }
    }
    return new Pair(mini,maxi);
    }
}


Q-3->Kth Smallest--->https://www.geeksforgeeks.org/problems/kth-smallest-element5635/1


class Solution {
    public static int kthSmallest(int[] arr, int k) {
    PriorityQueue<Integer> res = new PriorityQueue<>();
        for(int i = 0;i<arr.length;i++){
            res.add(arr[i]);
        }
       int i = 0;
       while(k-1 >i){
           res.poll();
           i++;
       }
       return res.poll();
    }
}


Q-4->Sort 0s, 1s and 2s -->https://www.geeksforgeeks.org/problems/sort-an-array-of-0s-1s-and-2s4231/1



class Solution {
    public void sort012(int[] arr) {
    int low = 0;
    int mid = 0;
    int high = arr.length-1;
    while(mid<=high){
        if(arr[mid] == 0){
            int temp = arr[low];
            arr[low] = arr[mid];
            arr[mid] = temp;
            low++;
            mid++;
        }
        else if(arr[mid] == 1)mid++;
        else{
            int temp =arr[mid];
            arr[mid] = arr[high];
            arr[high] = temp;
            high--;
        }
    }
    }
}


Q-5-> Move all negative elements to end--->https://www.geeksforgeeks.org/problems/move-all-negative-elements-to-end1813/1


//*******But it take approx. O(n^2) and constant space

 class Solution {
   public void segregateElements(int[] arr) {
       for(int i = 1;i<arr.length;i++){
           int key = arr[i];
           if(key >=0){
               int j = i-1;
               while(j>=0 && arr[j]<0){
                   arr[j+1] = arr[j];
                   j--;
               }
               arr[j+1] = key;
           }
       }
   }
 }


****Sol^n 2*********

class Solution {
    public void segregateElements(int[] arr) {
        int n = arr.length;
        int posCount = 0;
        int negCount = 0;

        for (int i = 0; i < n; i++) {
            if (arr[i] < 0)
                negCount++;
            else
                posCount++;
        }

        int[] positives = new int[posCount];
        int[] negatives = new int[negCount];

        int posIndex = 0, negIndex = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] >= 0)
                positives[posIndex++] = arr[i];
            else
                negatives[negIndex++] = arr[i];
        }

        // Merge back to arr[]
        int idx = 0;
        for (int i = 0; i < positives.length; i++) {
            arr[idx++] = positives[i];
        }
        for (int i = 0; i < negatives.length; i++) {
            arr[idx++] = negatives[i];
        }
    }
}

Q-6->Union of 2 Sorted with Duplicates --->https://www.geeksforgeeks.org/problems/union-of-two-sorted-arrays-1587115621/1

class Solution {
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        ArrayList<Integer> res = new ArrayList<>();
        int i = 0;
        int j = 0;
        int n1 = a.length;
        int n2 = b.length;

        while (i < n1 && j < n2) {
            if (a[i] == b[j]) {
                if (res.isEmpty() || res.get(res.size() - 1) != a[i]) {
                    res.add(a[i]);
                }
                i++;
                j++;
            } else if (a[i] > b[j]) {
                if (res.isEmpty() || res.get(res.size() - 1) != b[j]) {
                    res.add(b[j]);
                }
                j++;
            } else {
                if (res.isEmpty() || res.get(res.size() - 1) != a[i]) {
                    res.add(a[i]);
                }
                i++;
            }
        }

        while (i < n1) {
            if (res.isEmpty() || res.get(res.size() - 1) != a[i]) {
                res.add(a[i]);
            }
            i++;
        }

        while (j < n2) {
            if (res.isEmpty() || res.get(res.size() - 1) != b[j]) {
                res.add(b[j]);
            }
            j++;
        }

        return res;
    }
}


Q-7->Second Largest-->https://www.geeksforgeeks.org/problems/second-largest3735/1



class Solution {
    public int getSecondLargest(int[] arr) {
        int largest = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > largest) {
                second = largest;
                largest = arr[i];
            } else if (arr[i] > second && arr[i] != largest) {
                second = arr[i];
            }
        }

        // If second is not updated, return -1 to indicate no second largest
        return (second == Integer.MIN_VALUE) ? -1 : second;
    }
}

 

